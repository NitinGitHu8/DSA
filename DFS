package graphs;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;

public class Graph {
	static private int V;
	ArrayList<ArrayList<Integer>>a=new ArrayList<ArrayList<Integer>>();
	Graph(int v){
		V=v;
		for(int i=0;i<V;i++) {
		a.add(new ArrayList<Integer>());
		}
	}
	void addEdge(int u,int v) {
		a.get(u).add(v);
		a.get(v).add(u);
	}
	void dfs(int s,boolean visited[]) {
		visited[s]=true;
		System.out.print(s+" ");
		for(int v:a.get(s)) {
			if(visited[v]==false) {
				dfs(v,visited);
			}
		}
	}
	int dfsDis(boolean visited[]) {
		int cnt=0;
		for(int i=0;i<V;i++) {
			if(visited[i]==false) {
				dfs(i,visited);
				cnt++;
			}
		}
		return cnt;
	}
	public static void main(String args[]) {
		Graph g=new Graph(6);
		boolean visited[]=new boolean[V];
		g.addEdge(0, 1);
		g.addEdge(0,2);
		g.addEdge(2, 4);
		g.addEdge(1, 3);
		int cnt=g.dfsDis(visited);
		System.out.println(cnt+" ");
		
		
	}
	
	
		
		
	}
	
