package graphs;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Stack;

public class Graph {
	static private int V;
	//ArrayList<ArrayList<Integer>>a=new ArrayList<ArrayList<Integer>>();
	int graph[][];
	Graph(int v){
		V=v;
		/*for(int i=0;i<v;i++) {
		a.add(new ArrayList<Integer>());
		}*/
		graph=new int[V][V];
	}
	void addEdge(int u,int v) {
		graph[u][v]=1;
	}
	int[][] reverseEdge(int graph[][]) {
		int mat[][]=new int[V][V];
		for(int i=0;i<V;i++) {
			for(int j=0;j<V;j++){
				mat[j][i]=graph[i][j];
			}
		}
		return mat;
		
		
	}
	void DFS(int s,boolean visited[],int mat[][]) {
		visited[s]=false;
		System.out.print(s+" ");
		for(int v=0;v<V;v++) {
			if(visited[v]==false&&mat[s][v]!=0) {
				DFS(v,visited,mat);
			}
		}
	}
	void topologicalSort(int s,boolean visited[],Stack<Integer>st) {
		visited[s]=true;
		for(int v=0;v<V;v++) {
			if(graph[s][v]!=0&&visited[v]==false) {
				topologicalSort(v,visited,st);
			}
		}
		st.push(s);
		
		}
	void KosaRaju() {
		boolean visited[]=new boolean[V];
		Stack<Integer>st=new Stack<Integer>();
		for(int i=0;i<V;i++) {
			if(visited[i]==false) {
				topologicalSort(i,visited,st);
				
			}
		}
		int mat[][]=reverseEdge(graph);
		Arrays.fill(visited, false);
		while(st.isEmpty()==false) {
			int s=st.pop();
			if(visited[s]==false) {
				DFS(s,visited,mat);
				
				
			}
		}
	}
	public static void main(String args[]) {
		Graph g=new Graph(5);
		g.addEdge(0,1);
		g.addEdge(1,2);
		g.addEdge(2,0);
		g.addEdge(3,1);
		g.addEdge(3,4);
		g.KosaRaju();
		
		
		
		
	}
		
		
	}
	
