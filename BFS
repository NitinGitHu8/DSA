package graphs;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;

public class Graph {
	static private int V;
	ArrayList<ArrayList<Integer>>a=new ArrayList<ArrayList<Integer>>();
	int graph[][];
	Graph(int v){
		V=v;
		for(int i=0;i<V;i++) {
			a.add(new ArrayList<Integer>());
		}
		
	}
	void addEdge(int u,int v) {
		a.get(u).add(v);
		a.get(v).add(u);
	}
	void bfs(int s,boolean visited[]) {
		Queue<Integer>q=new LinkedList<Integer>();
		q.add(s);
		visited[s]=true;
		while(q.isEmpty()==false) {
			s=q.poll();
			System.out.print(s+" ");
		for(int v:a.get(s)) {
			if(visited[v]==false) {
				visited[v]=true;
				q.add(v);
				
				
			}
		}
	}
	
	}
	int bfsDis(boolean visited[]) {
		int cnt=0;
			for(int i=0;i<V;i++) {
				if(visited[i]==false) {
					bfs(i,visited);
					cnt++;
				}
			}
			return cnt;
			
		}
	public static void main(String args[]) {
		Graph g=new Graph(6);
		g.addEdge(0, 1);
		g.addEdge(0, 2);
		g.addEdge(1, 3);
		//g.addEdge(3, 5);
		g.addEdge(2, 4);
		//g.addEdge(4, 5);s
		
		boolean visited[]=new boolean[V];
		int cnt=g.bfsDis(visited);
		System.out.println(cnt+" ");
		
		
		
	}
	
	
		
		
	}
