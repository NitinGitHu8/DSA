package graphs;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;

public class Graph {
	static private int V=6;
	ArrayList<ArrayList<Integer>>a=new ArrayList<ArrayList<Integer>>();
	Graph(int v){
		V=v;
		for(int i=0;i<V;i++) {
			a.add(new ArrayList<Integer>());
		}
	}
	void addEdge(int u,int v) {
		a.get(u).add(v);
		a.get(v).add(u);
		
	}
	void BFS(int s,boolean visited[]) {
		Queue<Integer>q=new LinkedList<Integer>();
		visited[s]=true;
		q.add(s);
		while(q.isEmpty()==false) {
			int u=q.poll();
			System.out.print(u+" ");
			for(int v:a.get(u)) {
			if(visited[v]==false) {
				visited[v]=true;
				q.add(v);
			}
			}
			
		}
	}
	public static void main(String args[]) {
		Graph g=new Graph(6);
		boolean visited[]=new boolean[V];
		g.addEdge(0, 1);
		g.addEdge(0, 2);
		g.addEdge(0, 5);
		g.addEdge(1, 4);
		g.addEdge(2, 3);
		g.addEdge(5, 4);
		g.addEdge(5, 3);
		g.BFS(0,visited);
	}
	
	
		
		
	}
	


	


